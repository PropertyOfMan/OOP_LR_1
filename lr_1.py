number = ['десять', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять']
number_suffix = ['тысяч', 'сот', 'ста', 'десят', 'надцать']
# данные списки перевода чисел в строки

def check_up_to_twenty(fourth_d, fifth_d): # перевод 2-значных чисел от 0 до 19 включительно в формат строки
    if not (int(fourth_d) < 2):
        return '' # Если первая цифра двухзначного числа меньше 2, то происходит возврат пустой строки

    if fourth_d == '0': # Если первая цифра двухначного числа равна 0, то...
        return number[int(fifth_d)] if fifth_d != '0' else ''
        # Если вторая цифра двухзначного числа не равна 0, то возвращается слово, соответствующее данной цифре,
        # иначе возвращается пустая строка.
        # Все слова берутся из списка по обращению к элементу этого списка, равному самой цифре.
        # Далее уточнение об обращениях к единичным элементам списка добавляться не будет.

    if fourth_d == '1': # Если первая цифра двухначного числа равна 1, то...
        if fifth_d == '0':
            return number[0] # Если вторая цифра двухзначного числа равна 0, то возвращается "десять"

        else: # ..., иначе...
            if fifth_d == '1' or fifth_d == '3':
                number_format = number[int(fifth_d)]
                # Если вторая цифра числа равна 1 или 3, то выводится соответствующее слово из списка

            else: # ..., иначе...
                number_format = number[int(fifth_d)][:-1]
                # Здесь происходит срез до последней буквы слова (не включительно), так как, например,
                # в слове четырнадцать часть слова "четыр" - это слово "четыре" без последней буквы

                if fifth_d == '2':
                    number_format += 'е'
                    # Но для слова двенадцать нужно заменить "два" на "две"

            return number_format + number_suffix[-1] # Возврат двухзначного числа

    # Далее для экономии места все строчки не будут разбираться настолько подробно


def check_from_twenty_to_hundred(fourth_d, fifth_d): # перевод 2-значных чисел от 20 до 99 включительно в формат строки
    if not (2 <= int(fourth_d) < 10):
        return ''
        # Если двухзначное число не лежит в пределах [20, 100), то возвращается пустая строка

    number_format = number[int(fourth_d)]
    # В number_format содержится слово, соответствующее первой цифре двухзначного числа

    suff =  number_suffix[-1][2:] if fourth_d in '23' else number_suffix[-2]
    # В suff лежит суффикс, соответствующий данной цифре десятков. Для 2 и 3 особые суффиксы

    if fourth_d in '49':
        number_format, suff = 'сорок' if fourth_d == '4' else 'девяносто', ''
        # Сорок и девяносто являются исключениями из остальных десятков, так что это тоже учитываем

    return number_format + suff + ' ' + str(number[int(fifth_d)] if fifth_d != '0' else '')
    # Возвращаем строку формата <слово_десятков><суффикс_десятков> <слово_единиц>
    # Если единиц нет, то слова единиц тоже нет


def check_up_to_hundred(fourth_d, fifth_d): # перевод всех чисел до 99 включительно в формат строки
    # Объединение двух функций, описанных выше
    tmp = []
    tmp.append(check_up_to_twenty(fourth_d, fifth_d))
    tmp.append(check_from_twenty_to_hundred(fourth_d, fifth_d))
    # Собирается список слов, соответствующих двухзначному числу
    return ''.join(filter(lambda x: x != '', tmp))
    # Возвращается строка, форматируемая из списка слов, исключая пустые строки


def check_hundreds(third_d): # перевод сотен в формат строки
    if third_d in '10':
        return 'сто' if third_d == '1' else ''
        # Сто является исключением из остальных сотен, поэтому возвращаем его отдельно

    if third_d == '2':
        return 'двести'
        # Двести также является исключением

    return number[int(third_d)] + (number_suffix[2] if third_d in '34' else number_suffix[1])
    # Возвращаем строку в формате <слово_сотен><суффикс_сотен>


def check_thousands(first_d, second_d): # перевод тысяч в формат строки
    dec = check_up_to_hundred(first_d, second_d)
    # Получаем двухзначное число для количества тысяч

    thousand = number_suffix[0]
    # Указываем базовое слово "тысяч"
    if int(first_d) >= 2 and second_d in '12':
        dec = dec.split(' ')[0] + ' ' + ('одна' if second_d == '1' else 'две')
        # Если заданное число содержит второй цифрой 1 или 2, то склоняем слово в нужном падеже

        thousand = number_suffix[0] + 'а' if second_d == '1' else number_suffix[0] + 'и'
        # Аналогично с прошлым действием, склоняем слово "тысяча" в нужном падеже

    if int(first_d) >= 2 and second_d in '34':
        thousand = number_suffix[0] + 'и'
        # Для цифр 3 и 4 особого склонения самих названий единиц нет, но склоняем тысячу, как "тысячи"
    return dec + ' ' + thousand
    # Возвращаем строку в формате <строка_двухзначных_чисел> <склонение_тысача>


def main(line): # основная функция перевода числа в строку
    num_string = [] # объявление списка
    if len(line) != 5:
        return 'Было введено {}-значное число.'.format(len(line))
        # Проверка, что было введено 5-значное число. Если ответ False, происходит выход из функции

    first_digit, second_digit, third_digit, fourth_digit, fifth_digit = line[:]
    # Задаются переменные для каждой цифры числа

    num_string.append(check_thousands(first_digit, second_digit))
    # В список num_string добавляются слова перевода тысяч

    num_string.append(check_hundreds(third_digit))
    # В список num_string добавляются слова перевода сотен

    num_string.append(check_up_to_hundred(fourth_digit, fifth_digit))
    # В список num_string добавляются слова перевода десятков и единиц

    return ' '.join(num_string) # Возврат отформатированной строки


if __name__ == '__main__': # Если программа открывается "изнутри", а не как модуль, то происходит выполнение функции
    print(main(input('Введите 5-значное число:\n')))
    # Вывести в консоль результат работы функции main, в которую были поданы данные ввода из консоли.
    # Перед вводом числа в консоль, пользователю выводится сообщение "Введите 5-значное число:"
